/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */


var doc;                    // HTML document being edited; contained in an iframe to keep focus on both toolbar and document simultaneously
var originalSettings = {};  // Original content and settings, in case there is no client side database


// Called by HTML body element's onload event when the Safari web app is ready to start
function load(){
    dashcode.setupParts();
    document.getElementById("leftJustifyButton").object._setPressed(true);
    
    // enable editing
    doc = document.getElementsByTagName("iframe")[0].contentDocument;
    doc.designMode = "on";
    Event.observe(doc, "keypress", updateContentDocument);
    Event.observe(doc, "mousemove", updateToolbarButtons);
    Event.observe(doc, "mouseup", updateToolbarButtons);
    Event.observe(doc, "keyup", updateToolbarButtons);
    Event.observe(doc, "keydown", updateToolbarButtons);
    
    doc.body.style.fontFamily = "Helvetica";
    
    var placeholder = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
    
    doc.body.innerHTML = originalSettings.content = placeholder;
    
    initDB(false);
}

var _updateTimer = null;

// Update the toolbar state and database with the new content
function updateContentDocument(event){
    
    if (_updateTimer) clearTimeout(_updateTimer);
    
    _updateTimer = setTimeout(function(){
        _updateTimer = null;
        updateValue(4, "content", doc.body.innerHTML);
        updateToolbarButtons(event);
    },100);
}

// Update the buttons' states when user types, selects text, or moves the cursor
function updateToolbarButtons(event){
    
    // Update the Bold, Italic and Underline buttons.
    document.getElementById("boldButton").object._setPressed(doc.queryCommandState("Bold"));
    document.getElementById("italicButton").object._setPressed(doc.queryCommandState("Italic"));
    document.getElementById("underlineButton").object._setPressed(doc.queryCommandState("Underline"));
    
    // Update the font family 
    var element = document.getElementById('fontFamily');
    var value = doc.queryCommandValue('FontName');
    if (value) {
        for (var i = 0; i < element.length; i++) {
            var text = element.options[i].innerText;
            if (value.charAt(0) == "\'") {
                text = "\'" + text + "\'";
            }
            if (text == value) {
                element.selectedIndex = i;
                break;
            } 
        }
    }
    
    // Update the font size 
    element = document.getElementById('fontSize');
    value = doc.queryCommandValue('FontSize');
    if (value) {
        for (var i = 0; i < element.length; i++) {
            if (element.options[i].innerText == value) {
                element.selectedIndex = i;
                break;
            } 
        }
    }
    
    // Update the font color
    element = document.getElementById('fontColor');
    value = doc.queryCommandValue('ForeColor');
    if (value) {
        for (var i = 0; i < element.length; i++) {
            if (element.options[i].getAttribute("data-rgb") == value) {
                element.selectedIndex = i;
                break;
            }
        } 
    }
}



/****** Bold, Italic and Underline **************************/
function makeBold(event){
    doc.execCommand("Bold", false, null);
    updateContentDocument();
}

function makeItalicized(event){
    doc.execCommand("Italic", false, null);
    updateContentDocument();
}

function makeUnderlined(event){
    doc.execCommand("Underline", false, null);
    updateContentDocument();
}



/****** Justification (Left, Center, Full or Right) **************************/
function makeLeftJustified(event){
    makeJustified("JustifyLeft");
}

function makeCenterJustified(event){
    makeJustified("JustifyCenter");
}

function makeFullJustified(event){
    makeJustified("JustifyFull");
}

function makeRightJustified(event){
    makeJustified("JustifyRight");
}

function makeJustified(justification){
    doc.execCommand(justification, false, null);

    updateContentDocument();

    // Update the Justification buttons
    document.getElementById("leftJustifyButton").object._setPressed(justification === "JustifyLeft");
    document.getElementById("centerJustifyButton").object._setPressed(justification === "JustifyCenter");
    document.getElementById("fullJustifyButton").object._setPressed(justification === "JustifyFull");
    document.getElementById("rightJustifyButton").object._setPressed(justification === "JustifyRight");
}



/****** Font settings **************************/

// Font-family - Changes font-family of the selection.
function changeFontFamily(event){
    var target = event.target ? event.target : event.srcElement;
    doc.execCommand("FontName", false, target.value);
    
    updateContentDocument();
}


// Font-size - Changes font-size of the selection.
function changeFontSize(event){
    var target = event.target ? event.target : event.srcElement;

    doc.execCommand("FontSize", false, target.selectedIndex + 1 + "px");
    
    updateContentDocument();
}


// Font-color - Changes font-color of the selection.
function changeFontColor(event){
    var popup = event.target ? event.target : event.srcElement;
    var color = popup.options[popup.selectedIndex].innerText;
    doc.execCommand("ForeColor", false, color);
    
    updateContentDocument();
}



/****** Database interaction **************************/

// Initialize the content string to defaults. If there is a database, then the initialization values will be saved as well.
function initContent(){    
    insertValue(4, "content", originalSettings.content);
}


// Load saved content and settings from the database. If there is no local database, we just use element's original properties
function loadContent(){
    if (!retrieveStoredInfo(setValueForKey))
        doc.body.innerHTML = originalSettings.content;
}


// Evaluate the key and update the corresponding element
function setValueForKey(key, value){
    if (key == 'content')
        doc.body.innerHTML = value;
}